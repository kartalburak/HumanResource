// <auto-generated />
using System;
using HumanResource.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HumanResource.DataAccess.Migrations
{
    [DbContext(typeof(HumanResourceContext))]
    partial class HumanResourceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HumanResource.DataAccess.Core.Activity", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityCapacity");

                    b.Property<DateTime>("ActivityDate");

                    b.Property<string>("ActivityDescription")
                        .HasMaxLength(500);

                    b.Property<bool>("ActivityIsDeleted");

                    b.Property<string>("ActivityName")
                        .HasMaxLength(100);

                    b.Property<bool>("ActivityStatus");

                    b.Property<int>("EmployeeId");

                    b.HasKey("ActivityID");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.ActivityBranch", b =>
                {
                    b.Property<int>("ActivityId");

                    b.Property<int>("BranchId");

                    b.HasKey("ActivityId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("ActivityBranch");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.ActivityDepartment", b =>
                {
                    b.Property<int>("ActivityId");

                    b.Property<int>("DepartmentId");

                    b.HasKey("ActivityId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("ActivityDepartment");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.ActivityEmployee", b =>
                {
                    b.Property<int>("ActivityId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("ActivityId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ActivityEmployee");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.Advertisement", b =>
                {
                    b.Property<int>("AdvertisementID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdvertisementBeginDate");

                    b.Property<string>("AdvertisementCity")
                        .HasMaxLength(50);

                    b.Property<string>("AdvertisementCountry")
                        .HasMaxLength(50);

                    b.Property<string>("AdvertisementDescription")
                        .HasMaxLength(2147483647);

                    b.Property<string>("AdvertisementEducationLevel")
                        .HasMaxLength(100);

                    b.Property<DateTime>("AdvertisementEndDate");

                    b.Property<string>("AdvertisementExperience")
                        .HasMaxLength(500);

                    b.Property<bool>("AdvertisementIsDeleted");

                    b.Property<bool>("AdvertisementIsStatus");

                    b.Property<string>("AdvertisementJobDescription")
                        .HasMaxLength(2147483647);

                    b.Property<string>("AdvertisementMilitary")
                        .HasMaxLength(50);

                    b.Property<string>("AdvertisementName")
                        .HasMaxLength(100);

                    b.Property<int>("AdvertisementPersonelNumber");

                    b.Property<string>("AdvertisementPositionLevel")
                        .HasMaxLength(100);

                    b.Property<string>("AdvertisementTitle")
                        .HasMaxLength(100);

                    b.Property<int>("AdvertisementViewsCount");

                    b.Property<string>("AdvertisementWayOfWorking")
                        .HasMaxLength(50);

                    b.HasKey("AdvertisementID");

                    b.ToTable("Advertisement");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.AdvertisementBranch", b =>
                {
                    b.Property<int>("AdvertisementId");

                    b.Property<int>("BranchId");

                    b.HasKey("AdvertisementId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("AdvertisementBranch");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.AdvertisementDepartment", b =>
                {
                    b.Property<int>("AdvertisementId");

                    b.Property<int>("DepartmentId");

                    b.HasKey("AdvertisementId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("AdvertisementDepartment");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.Announcement", b =>
                {
                    b.Property<int>("AnnouncementID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnnouncementBeginDate");

                    b.Property<string>("AnnouncementContent")
                        .IsRequired()
                        .HasMaxLength(2147483647);

                    b.Property<string>("AnnouncementDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("AnnouncementEndDate");

                    b.Property<bool>("AnnouncementIsDeleted");

                    b.Property<string>("AnnouncementName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("AnnouncementStatus");

                    b.Property<string>("AnnouncementTitle")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("AnnouncementID");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.AnnouncementBranch", b =>
                {
                    b.Property<int>("AnnouncementId");

                    b.Property<int>("BranchId");

                    b.HasKey("AnnouncementId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("AnnouncementBranch");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.AnnouncementDepartment", b =>
                {
                    b.Property<int>("AnnouncementId");

                    b.Property<int>("DepartmentId");

                    b.HasKey("AnnouncementId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("AnnouncementDepartment");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.AnnouncementEmployee", b =>
                {
                    b.Property<int>("AnnouncementId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("AnnouncementId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AnnouncementEmployee");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchAddress")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("BranchDescription")
                        .HasMaxLength(200);

                    b.Property<string>("BranchFax")
                        .HasMaxLength(100);

                    b.Property<bool>("BranchIsDeleted");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("BranchStatus");

                    b.Property<string>("BranchTelephone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("BranchId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.BranchDepartment", b =>
                {
                    b.Property<int>("BranchId");

                    b.Property<int>("DepartmentId");

                    b.HasKey("BranchId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("BranchDepartment");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.BranchEducation", b =>
                {
                    b.Property<int>("BranchId");

                    b.Property<int>("EducationId");

                    b.HasKey("BranchId", "EducationId");

                    b.HasIndex("EducationId");

                    b.ToTable("BranchEducation");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentDescription")
                        .HasMaxLength(200);

                    b.Property<bool>("DepartmentIsDeleted");

                    b.Property<string>("DepartmentManager")
                        .HasMaxLength(100);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("DepartmentStatus");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.DepartmentEducation", b =>
                {
                    b.Property<int>("DepartmentId");

                    b.Property<int>("EducationId");

                    b.HasKey("DepartmentId", "EducationId");

                    b.HasIndex("EducationId");

                    b.ToTable("DepartmentEducation");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.Education", b =>
                {
                    b.Property<int>("EducationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EducationBeginDate");

                    b.Property<int>("EducationCapacity");

                    b.Property<DateTime>("EducationEndDate");

                    b.Property<bool>("EducationIsDeleted");

                    b.Property<bool>("EducationIsMandatory");

                    b.Property<string>("EducationName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("EducationStatus");

                    b.Property<string>("EducationTrainerName")
                        .HasMaxLength(50);

                    b.Property<string>("EducationTrainerSurname")
                        .HasMaxLength(50);

                    b.Property<string>("EducationTrainerTelephone")
                        .HasMaxLength(11);

                    b.Property<string>("EducationTrainerTitle")
                        .HasMaxLength(100);

                    b.Property<string>("EducationsNotes")
                        .HasMaxLength(2147483647);

                    b.HasKey("EducationID");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.EducationEmployee", b =>
                {
                    b.Property<int>("EducationId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("EducationId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EducationEmployee");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdvertisementID");

                    b.Property<int?>("BranchId");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("EmployeeBankCode")
                        .HasMaxLength(20);

                    b.Property<string>("EmployeeBankName")
                        .HasMaxLength(20);

                    b.Property<DateTime>("EmployeeBirthdate");

                    b.Property<string>("EmployeeBirthplace")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("EmployeeBloodGroup")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("EmployeeBuildNo")
                        .HasMaxLength(20);

                    b.Property<int>("EmployeeChildrenCount");

                    b.Property<string>("EmployeeCity")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("EmployeeCompanyMail")
                        .HasMaxLength(30);

                    b.Property<string>("EmployeeCountry")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("EmployeeDisabilitySituation");

                    b.Property<string>("EmployeeDrivingLicenseName")
                        .HasMaxLength(20);

                    b.Property<string>("EmployeeEmail")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("EmployeeGender")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("EmployeeGraduationDepartment")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("EmployeeGraduationSchool")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<double>("EmployeeGraduationScore");

                    b.Property<string>("EmployeeIban")
                        .HasMaxLength(30);

                    b.Property<string>("EmployeeImagePath")
                        .HasMaxLength(250);

                    b.Property<bool>("EmployeeIsDeleted");

                    b.Property<bool>("EmployeeIsDrivingLicense");

                    b.Property<bool>("EmployeeIsSmoke");

                    b.Property<string>("EmployeeLanguage1")
                        .HasMaxLength(20);

                    b.Property<string>("EmployeeLanguage2")
                        .HasMaxLength(20);

                    b.Property<string>("EmployeeLanguage3")
                        .HasMaxLength(20);

                    b.Property<string>("EmployeeManager")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("EmployeeMarialStatus");

                    b.Property<DateTime>("EmployeeMilitaryDate");

                    b.Property<string>("EmployeeMilitaryStatus")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("EmployeeNotes")
                        .HasMaxLength(2147483647);

                    b.Property<string>("EmployeePassword")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EmployeePostcode")
                        .HasMaxLength(10);

                    b.Property<string>("EmployeeReferenceNameSurname")
                        .HasMaxLength(100);

                    b.Property<string>("EmployeeReferenceNotes")
                        .HasMaxLength(500);

                    b.Property<string>("EmployeeReferenceTelephone")
                        .HasMaxLength(15);

                    b.Property<DateTime>("EmployeeRegisteredDate");

                    b.Property<string>("EmployeeSGKNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime>("EmployeeSSKFirstBeginDate");

                    b.Property<bool>("EmployeeStatus");

                    b.Property<string>("EmployeeStreet")
                        .HasMaxLength(20);

                    b.Property<string>("EmployeeSurname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("EmployeeTc")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<string>("EmployeeTelephone1")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("EmployeeTelephone2")
                        .HasMaxLength(15);

                    b.Property<string>("EmployeeTitle")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EmployeeUsername")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("EmployeeWifeBirthdate");

                    b.Property<string>("EmployeeWifeNameSurname")
                        .HasMaxLength(100);

                    b.Property<string>("EmployeeWifeTCKN")
                        .HasMaxLength(11);

                    b.Property<string>("EmployeeWifeTelephone")
                        .HasMaxLength(15);

                    b.Property<DateTime>("EmployeeWorkBeginDate");

                    b.Property<DateTime>("EmployeeWorkOutDate");

                    b.Property<int>("IncapacityReportId");

                    b.HasKey("EmployeeId");

                    b.HasIndex("AdvertisementID");

                    b.HasIndex("BranchId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.EmployeeMessage", b =>
                {
                    b.Property<int>("MessageId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("MessageId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeMessage");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.EmployeeMission", b =>
                {
                    b.Property<int>("MissionId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("MissionId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeMission");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.EmployeePermit", b =>
                {
                    b.Property<int>("PermitId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("PermitId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeePermit");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.EmployeeRating", b =>
                {
                    b.Property<int>("EmployeeRatingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("EmployeeIsDeleted");

                    b.Property<string>("EmployeeRatingEvaluative")
                        .HasMaxLength(2147483647);

                    b.Property<DateTime>("EmployeeRatingRateDate");

                    b.Property<string>("EmployeeRatingResult")
                        .HasMaxLength(2147483647);

                    b.Property<bool>("EmployeeRatingStatus");

                    b.HasKey("EmployeeRatingId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeRating");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.EmployeeReference", b =>
                {
                    b.Property<int>("ReferenceId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("ReferenceId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeReference");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.IncapacityReport", b =>
                {
                    b.Property<int>("IncapacityReportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginDate");

                    b.Property<string>("Description");

                    b.Property<string>("Diagnostic");

                    b.Property<string>("Diploma");

                    b.Property<bool>("Disease");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Hospital");

                    b.Property<bool>("IncapacityReportIsDeleted");

                    b.Property<bool>("JobAccident");

                    b.Property<bool>("JobDisease");

                    b.Property<DateTime>("NextControl");

                    b.Property<string>("PatentNumber");

                    b.Property<string>("PatientNameSurname");

                    b.Property<bool>("PeriodicControl");

                    b.Property<string>("Polyclinic");

                    b.Property<DateTime>("PolyclinicDate");

                    b.Property<string>("RegistrationNumber");

                    b.Property<DateTime>("VisaDate");

                    b.HasKey("IncapacityReportId");

                    b.ToTable("IncapacityReport");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.JobApplication", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthdate");

                    b.Property<string>("Birthplace");

                    b.Property<int?>("BranchId");

                    b.Property<string>("ChildAge");

                    b.Property<string>("ChildNumber");

                    b.Property<int?>("EmployeeId");

                    b.Property<double>("ExpectedSalary");

                    b.Property<string>("Gender");

                    b.Property<string>("HomePhone");

                    b.Property<bool>("IsCriminalRecord");

                    b.Property<bool>("IsDrivingLicense");

                    b.Property<bool>("JobApplicationIsDeleted");

                    b.Property<bool>("JobApplicationStatus");

                    b.Property<string>("JobPhone");

                    b.Property<string>("LicenseClass");

                    b.Property<DateTime>("LicenseDate");

                    b.Property<string>("MilitaryStatus");

                    b.Property<string>("NameSurname");

                    b.Property<string>("Nationality");

                    b.Property<string>("Phone");

                    b.Property<string>("SchoolCity");

                    b.Property<string>("SchoolDegree");

                    b.Property<string>("SchoolName");

                    b.Property<string>("WifeEducation");

                    b.Property<string>("WifeJob");

                    b.Property<string>("WifeJobAddress");

                    b.Property<string>("WifeName");

                    b.HasKey("ApplicationID");

                    b.HasIndex("BranchId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("JobApplication");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.JobApplicationLanguage", b =>
                {
                    b.Property<int>("JobApplicationId");

                    b.Property<int>("LanguageId");

                    b.HasKey("JobApplicationId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("JobApplicationLanguage");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.JobApplicationReference", b =>
                {
                    b.Property<int>("JobApplicationId");

                    b.Property<int>("ReferenceId");

                    b.HasKey("JobApplicationId", "ReferenceId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("JobApplicationReference");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.Language", b =>
                {
                    b.Property<int>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("LanguageIsDeleted");

                    b.Property<string>("LanguageName");

                    b.Property<string>("LanguageRead");

                    b.Property<string>("LanguageSpeak");

                    b.Property<bool>("LanguageStatus");

                    b.Property<string>("LanguageUnderstand");

                    b.Property<string>("LanguageWrite");

                    b.HasKey("LanguageID");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("LogActionName")
                        .HasMaxLength(50);

                    b.Property<string>("LogControllerName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LogDate");

                    b.Property<bool>("LogIsDeleted");

                    b.Property<string>("LogMessage")
                        .HasMaxLength(50);

                    b.Property<bool>("LogStatus");

                    b.Property<string>("LogType")
                        .HasMaxLength(50);

                    b.HasKey("LogId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MessageContent")
                        .HasMaxLength(2147483647);

                    b.Property<bool>("MessageIsDeleted");

                    b.Property<bool>("MessageIsRead");

                    b.Property<DateTime>("MessageSendDate");

                    b.Property<bool>("MessageStatus");

                    b.Property<string>("MessageSubject")
                        .HasMaxLength(100);

                    b.Property<string>("MessageTitle")
                        .HasMaxLength(100);

                    b.HasKey("MessageId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.Mission", b =>
                {
                    b.Property<int>("MissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(2147483647);

                    b.Property<DateTime>("MissionBeginDate");

                    b.Property<DateTime>("MissionEndDate");

                    b.Property<bool>("MissionIsDeleted");

                    b.Property<string>("MissionNotes")
                        .HasMaxLength(2147483647);

                    b.Property<bool>("MissionStatus");

                    b.Property<string>("Missionary")
                        .HasMaxLength(100);

                    b.HasKey("MissionId");

                    b.ToTable("Mission");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.Permit", b =>
                {
                    b.Property<int>("PermitId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PermitBeginDate");

                    b.Property<bool>("PermitConfirm");

                    b.Property<DateTime>("PermitEndDate");

                    b.Property<bool>("PermitIsDeleted");

                    b.Property<string>("PermitNotes")
                        .HasMaxLength(2147483647);

                    b.Property<string>("PermitReason")
                        .HasMaxLength(2147483647);

                    b.Property<DateTime>("PermitRequestDate");

                    b.Property<bool>("PermitStatus");

                    b.HasKey("PermitId");

                    b.ToTable("Permit");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.Reference", b =>
                {
                    b.Property<int>("ReferenceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ReferenceAddress")
                        .HasMaxLength(2147483647);

                    b.Property<string>("ReferenceCompanyName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ReferenceName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ReferenceSurname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ReferenceTelephone")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<string>("ReferenceTitle")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ReferenceID");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.ActivityBranch", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Activity", "Activity")
                        .WithMany("ActivityBranches")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Branch", "Branch")
                        .WithMany("ActivityBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.ActivityDepartment", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Activity", "Activity")
                        .WithMany("ActivityDepartments")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Department", "Department")
                        .WithMany("ActivityDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.ActivityEmployee", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Activity", "Activity")
                        .WithMany("ActivityEmployees")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Employee", "Employee")
                        .WithMany("ActivityEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.AdvertisementBranch", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Advertisement", "Advertisement")
                        .WithMany("AdvertisementBranches")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Branch", "Branch")
                        .WithMany("AdvertisementBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.AdvertisementDepartment", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Advertisement", "Advertisement")
                        .WithMany("AdvertisementDepartments")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Department", "Department")
                        .WithMany("AdvertisementDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.AnnouncementBranch", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Announcement", "Announcement")
                        .WithMany("AnnouncementBranches")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Branch", "Branch")
                        .WithMany("AnnouncementBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.AnnouncementDepartment", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Announcement", "Announcement")
                        .WithMany("AnnouncementDepartments")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Department", "Department")
                        .WithMany("AnnouncementDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.AnnouncementEmployee", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Announcement", "Announcement")
                        .WithMany("AnnouncementEmployees")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Employee", "Employee")
                        .WithMany("AnnouncementEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.BranchDepartment", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Branch", "Branch")
                        .WithMany("BranchDepartments")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Department", "Department")
                        .WithMany("BranchDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.BranchEducation", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Branch", "Branch")
                        .WithMany("BranchEducations")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Education", "Education")
                        .WithMany("BranchEducations")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.DepartmentEducation", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Department", "Department")
                        .WithMany("DepartmentEducations")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Education", "Education")
                        .WithMany("DepartmentEducations")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.EducationEmployee", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Education", "Education")
                        .WithMany("EducationEmployees")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Employee", "Employee")
                        .WithMany("EducationEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.Employee", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Advertisement", "Advertisement")
                        .WithMany("Employees")
                        .HasForeignKey("AdvertisementID");

                    b.HasOne("HumanResource.DataAccess.Core.Branch", "Branch")
                        .WithMany("Employee")
                        .HasForeignKey("BranchId");

                    b.HasOne("HumanResource.DataAccess.Core.Department", "Department")
                        .WithMany("Employee")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.EmployeeMessage", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Employee", "Employee")
                        .WithMany("EmployeeMessages")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Message", "Message")
                        .WithMany("EmployeeMessages")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.EmployeeMission", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Employee", "Employee")
                        .WithMany("EmployeeMissions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Mission", "Mission")
                        .WithMany("EmployeeMissions")
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.EmployeePermit", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Employee", "Employee")
                        .WithMany("EmployeePermits")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Permit", "Permit")
                        .WithMany("EmployeePermits")
                        .HasForeignKey("PermitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.EmployeeRating", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Employee", "Employee")
                        .WithMany("EmployeeRating")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.EmployeeReference", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Employee", "Employee")
                        .WithMany("EmployeeReferences")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Reference", "Reference")
                        .WithMany("EmployeeReferences")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.JobApplication", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Branch", "Branch")
                        .WithMany("JobApplication")
                        .HasForeignKey("BranchId");

                    b.HasOne("HumanResource.DataAccess.Core.Employee", "Employee")
                        .WithMany("JobApplication")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.JobApplicationLanguage", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.JobApplication", "JobApplication")
                        .WithMany("JobApplicationLanguages")
                        .HasForeignKey("JobApplicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Language", "Language")
                        .WithMany("JobApplicationLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.JobApplicationReference", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.JobApplication", "JobApplication")
                        .WithMany("JobApplicationReferences")
                        .HasForeignKey("JobApplicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanResource.DataAccess.Core.Reference", "Reference")
                        .WithMany("JobApplicationReferences")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanResource.DataAccess.Core.Log", b =>
                {
                    b.HasOne("HumanResource.DataAccess.Core.Employee", "Employee")
                        .WithMany("Log")
                        .HasForeignKey("EmployeeId");
                });
#pragma warning restore 612, 618
        }
    }
}
